@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using CharitySystem.Client.Services
@using CharitySystem_Shared
@using CharitySystem.Models
@using System.Net.Http.Headers
@using System.Security.Claims
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthProvider

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
	<InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control" />
	<InputText @bind-Value="loginModel.Password" placeholder="Password" type="password" class="form-control" />
	<button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
	private LoginRequest loginModel = new();

	private async Task HandleLogin()
	{
		var response = await Http.PostAsJsonAsync("api/login/login", loginModel);

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<JwtResponse>();
			Console.WriteLine("TOKEN: " + result?.token);

			await LocalStorage.SetItemAsync("authToken", result.token);
			((CustomAuthenticationStateProvider)AuthProvider).NotifyUserAuthentication(result.token);
			Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", result.token);

			var roles = GetRolesFromJwt(result.token);

			if (roles.Contains("Admin"))
			{
				Navigation.NavigateTo("/admin");
			}
			else
			{
				Navigation.NavigateTo("/profile");
			}
		}
		else
		{
			
		}
	}

	private List<string> GetRolesFromJwt(string jwt)
	{
		var payload = jwt.Split('.')[1];
		var jsonBytes = Convert.FromBase64String(PadBase64(payload));
		var keyValuePairs = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);

		if (keyValuePairs != null && keyValuePairs.TryGetValue(ClaimTypes.Role, out var roleClaim))
		{
			if (roleClaim is System.Text.Json.JsonElement element)
			{
				if (element.ValueKind == System.Text.Json.JsonValueKind.Array)
				{
					return element.EnumerateArray().Select(r => r.GetString()).ToList();
				}
				else
				{
					return new List<string> { element.GetString() };
				}
			}
		}

		return new List<string>();
	}

	private string PadBase64(string base64)
	{
		switch (base64.Length % 4)
		{
			case 2: return base64 + "==";
			case 3: return base64 + "=";
			default: return base64;
		}
	}

	public class JwtResponse
	{
		public string token { get; set; }
	}
}
